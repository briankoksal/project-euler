--Project Euler Problem #1	(Multiples of 3 and 5)

--If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
--Find the sum of all the multiples of 3 or 5 below 1000.
--filter 
sum' :: (Num a) => [a] -> a  
sum' = foldl (+) 0  

--function that returns true or false if multiple of 3 or 5
multipleof3or5 :: (Integral a) => a -> Bool
multipleof3or5 val
	| (val `mod` 3) == 0 = True
 	| (val `mod` 5) == 0 = True
 	| otherwise = False

euler1 :: (Integral a) => a
euler1 = sum (filter multipleof3or5 [1..999])



--euler1 :: (Integral a -> Bool) -> a 
--euler1 xs = foldl filter [1..1000]


--Project Euler Problem #2	(Multiples of 3 and 5)

--Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
--1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

--By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.